env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  trivy_image_scan:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-20.04
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - continue-on-error: true
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - continue-on-error: true
      name: Install chartpress
      run: 'pip install chartpress

        '
    - continue-on-error: true
      id: image
      name: Identify image name:tag
      run: "IMAGE_SPEC=$(\n    chartpress --list-images \\\n  | grep ${{ matrix.image_ref\
        \ }}:\n)\necho \"Identified image: $IMAGE_SPEC\"\n\necho \"::set-output name=spec::$IMAGE_SPEC\"\
        \necho \"::set-output name=name::$(echo $IMAGE_SPEC | sed 's/\\(.*\\):.*/\\\
        1/')\"\necho \"::set-output name=tag::$(echo $IMAGE_SPEC | sed 's/.*:\\(.*\\\
        )/\\1/')\"\n"
    - continue-on-error: true
      name: Create ./tmp dir
      run: mkdir ./tmp
    - continue-on-error: true
      id: scan_1
      name: Scan latest published image
      uses: aquasecurity/trivy-action@8f4c7160b470bafe4299efdc1c8a1fb495f8325a
      with:
        exit-code: '1'
        format: json
        ignore-unfixed: true
        image-ref: ${{ steps.image.outputs.spec }}
        output: tmp/scan_1.json
    - continue-on-error: true
      id: rebuild
      if: steps.scan_1.outcome == 'failure'
      name: Rebuild image
      run: 'docker build -t rebuilt-image images/${{ matrix.image_ref }}

        '
    - continue-on-error: true
      id: scan_2
      if: steps.rebuild.outcome == 'success'
      name: Scan rebuilt image
      uses: aquasecurity/trivy-action@8f4c7160b470bafe4299efdc1c8a1fb495f8325a
      with:
        format: json
        ignore-unfixed: true
        image-ref: rebuilt-image
        output: tmp/scan_2.json
    - continue-on-error: true
      id: analyze
      if: steps.rebuild.outcome == 'success'
      name: Analyze scan reports
      run: "echo \"::set-output name=utc_time::$(date --utc +'%F_%T')\"\n\njson_to_misc()\
        \ {\n    # Count vulnerabilities\n    VULNERABILITY_COUNT=\"$(cat tmp/scan_$1.json\
        \ | jq -r '[.Results[].Vulnerabilities | select(type != null)] | add | select(.\
        \ != null) | length')\"\n    echo \"VULNERABILITY_COUNT_$1=$VULNERABILITY_COUNT\"\
        \ >> $GITHUB_ENV\n\n    # Construct a markdown summary\n    if [[ \"$VULNERABILITY_COUNT\"\
        \ == \"0\" ]]; then\n        echo \"No vulnerabilities! :tada:\" >> tmp/md_summary_$1.md\n\
        \    else\n        echo \"Target | Vuln. ID | Package Name | Installed v.\
        \ | Fixed v.\" >> tmp/md_summary_$1.md\n        echo \"-|-|-|-|-\" >> tmp/md_summary_$1.md\n\
        \        cat tmp/scan_$1.json | jq -r '.Results[] | select(.Vulnerabilities\
        \ != null) | .Type + \" | \" + (.Vulnerabilities[] | .VulnerabilityID + \"\
        \ | \" + .PkgName + \" | \" + .InstalledVersion + \" | \" + .FixedVersion)'\
        \ | sort >> tmp/md_summary_$1.md\n    fi\n\n    # Use hack to set a multiline\
        \ string output\n    # ref: https://github.com/actions/toolkit/issues/403#issue-593398879\n\
        \    TMP=$(cat tmp/md_summary_$1.md)\n    TMP=\"${TMP//'%'/'%25'}\"\n    TMP=\"\
        ${TMP//$'\\n'/'%0A'}\"\n    TMP=\"${TMP//$'\\r'/'%0D'}\"\n    echo \"::set-output\
        \ name=md_summary_$1::$TMP\"\n\n    # Calculate a hash of the markdown summary\n\
        \    HASH=$(cat tmp/md_summary_$1.md | sha1sum)\n    HASH=${HASH:0:10}\n \
        \   export HASH_$1=$HASH\n    echo \"::set-output name=hash_$1::$HASH\"\n\
        }\n\njson_to_misc 1\njson_to_misc 2\n\n# Did rebuilding the image change anything?\n\
        if [ \"$HASH_1\" == \"$HASH_2\" ]; then\n    echo \"::set-output name=proceed::no\"\
        \n    echo \"No vulnerabilities were patched by rebuilding the image - won't\
        \ proceed!\"\nelse\n    echo \"::set-output name=proceed::yes\"\n    echo\
        \ \"Vulnerabilities were patched by rebuilding the image - will proceed!\"\
        \nfi\n"
    - continue-on-error: true
      if: steps.rebuild.outcome == 'success'
      name: Describe vulnerabilities
      uses: aquasecurity/trivy-action@8f4c7160b470bafe4299efdc1c8a1fb495f8325a
      with:
        format: table
        ignore-unfixed: true
        image-ref: rebuilt-image
    - continue-on-error: true
      if: steps.analyze.outputs.proceed == 'no'
      name: Decision to not proceed
      run: 'echo "::warning::None of the $VULNERABILITY_COUNT_1 vulnerabilities got
        patched by rebuilding the image :("

        '
    - continue-on-error: true
      if: steps.analyze.outputs.proceed == 'yes'
      name: Update VULN_SCAN_TIME in Dockerfile
      run: 'value_to_set="${{ steps.analyze.outputs.utc_time }}"

        file_to_update="images/${{ matrix.image_ref }}/Dockerfile"

        sed --in-place "s/\(#.*VULN_SCAN_TIME=\)\(.*\)/\1${value_to_set}/" "$file_to_update"


        git --no-pager diff --color=always

        '
    - continue-on-error: true
      if: steps.analyze.outputs.proceed == 'yes' && github.event_name != 'pull_request'
      name: Create or update a PR
      uses: peter-evans/create-pull-request@dcd5fd746d53dd8de555c0f10bca6c35628be47a
      with:
        author: jupyterhub vuln-scan bot <noreply@github.com>
        body: 'A rebuild of `${{ steps.image.outputs.name }}` has been found to influence
          the detected vulnerabilities! This PR will trigger a rebuild because it
          has updated a comment in the Dockerfile.


          ## About

          This scan for known vulnerabilities has been made by [aquasecurity/trivy](https://github.com/aquasecurity/trivy).
          Trivy was configured to filter the vulnerabilities with the following settings:

          - ignore-unfixed: `true`


          ## Before

          Before trying to rebuild the image, the following vulnerabilities was detected
          in `${{ steps.image.outputs.spec }}`.


          ${{ steps.analyze.outputs.md_summary_1 }}


          ## After

          ${{ steps.analyze.outputs.md_summary_2 }}

          '
        branch: vuln-scan-${{ matrix.image_ref }}
        commit-message: 'Patch known vulnerability in ${{ matrix.image_ref }}

          '
        labels: image:rebuild-to-patch-vuln
        reviewers: consideratio
        title: Vulnerability patch in ${{ matrix.image_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/sendbird-graveyard/zero-to-jupyterhub-k8s.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        include:
        - accept_failure: false
          image_ref: hub
        - accept_failure: false
          image_ref: secret-sync
        - accept_failure: false
          image_ref: network-tools
        - accept_failure: false
          image_ref: image-awaiter
        - accept_failure: false
          image_ref: singleuser-sample
    timeout-minutes: 60
name: Vuln. scan
'on':
  workflow_dispatch: {}
